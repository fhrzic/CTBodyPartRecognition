import pandas as pd
import numpy as np
import os


remap_dict =  {
    91: [1, 1, 1],
    73: [2.1, 2, 2],
    74: [2.2, 3, 2],
    71: [3.1, 4, 2],
    72: [3.2, 5, 2],
    69: [4.1, 6, 3],
    70: [4.2, 7, 3],
    50: [5.1, 8, 4],
    49: [5.2, 9, 4],
    48: [5.3, 10, 4],
    47: [5.4, 11, 4],
    46: [5.5, 12, 4],
    45: [5.6, 13, 4],
    44: [5.7, 14, 4],
    116:[6, 15, 5],
    92: [7.1, 16, 5],
    104: [7.2, 17, 5],
    93: [8.1, 18, 5],
    105: [8.2, 19, 5],
    94: [9.1, 20, 5],
    106: [9.2, 21, 5],
    95: [10.1, 22, 5],
    107: [10.2, 23, 5],
    96: [11.1, 24, 5],
    108: [11.2, 25, 5],
    97: [12.1, 26, 5],
    109: [12.2, 27, 5],
    98: [13.1, 28, 5],
    110: [13.2, 29, 5],
    99: [14.1, 30, 5],
    111: [14.2, 31, 5],
    100: [15.1, 32, 5],
    112: [15.2, 33, 5],
    101: [16.1, 34, 5],
    113: [16.2, 35, 5],
    102: [17.1, 36, 5],
    114: [17.2, 37, 5],
    103: [18.1, 38, 5],
    115: [18.2, 39, 5],
    43: [19.1, 40, 5],
    42: [19.2, 41, 5],
    41: [19.3, 42, 5],
    40: [19.4, 43, 5],
    39: [19.5, 44, 5],
    38: [19.6, 45, 5],
    37: [19.7, 46, 5],
    36: [19.8, 47, 5],
    35: [19.9, 48, 5],
    34: [19.11, 49, 5],
    33: [19.12, 50, 5],
    32: [19.13, 51, 5],
    31: [20.1, 52, 6],
    30: [20.2, 53, 6],
    29: [20.3, 54, 6],
    28: [20.4, 55, 6],
    27: [20.5, 56, 6],
    26: [21, 57, 8],
    124: [22, 58, 7],
    125: [23, 59, 7],
    77: [24.1, 60, 8],
    78: [24.2, 61, 8],
    25: [25, 62, 8],
    75: [26.1, 63, 9],
    76: [26.2, 64, 9],
    126: [27, 65, 10],
    127: [28, 66, 10],
    128: [29, 67, 10],
    118: [30, 68, 11],
    119: [31, 69, 12],
    120: [32, 70, 12],
    121: [33, 71, 13],
    122: [34, 72, 14],
    123: [35, 73, 14],
}      
    
def main(export_dir: str = None, 
         input_xlsx: str = None,
         input_names_xlsx: str = None,
         input_cheatsheet_path: str = None,
         label_type: str = "reduced_cluster_remaped"):
    """
    Main script for for extracting data - generating results.xlsx in each
    folder.

    Args:
        * export_dir, str, path to the export dir which contains folder where
        every folder represent one case which requires results.xlsx folder

        * input_xlsx, str, path to the input xlsx which is generated by the 
          totalsegmentor script ("THE BIG EXCELL FILE WIHT 128 PARTS")

        * input_names_xlsx, str, path to the xlsx keeping all the names mapings

        * input_cheatsheet_path, str, path to the blacklist labels

        * label_type, str, string defining the merging type necessary for results

    """
    # Read labels xlsx
    _main_df = pd.read_excel(input_xlsx, index_col = 1)
    _main_df = _main_df.drop(_main_df.columns[0], axis=1)

    # Obtain name path
    _names_df = pd.read_excel(input_names_xlsx, sheet_name=label_type)
    _names_list = _names_df["Name"].to_list() 

    # Obtain blacklist
    _cheatsheet_df = pd.read_excel(input_cheatsheet_path)
    _wrong_labels = np.array(_cheatsheet_df["Label"].tolist()) * np.array(_cheatsheet_df["Keep"].tolist())
    _wrong_labels = np.where(_wrong_labels == 0)[0]
    _wrong_labels += 1
    _blacklist = list(_wrong_labels)
 
    # Get name dictionary of cheatsheet
    _name_dict = _cheatsheet_df.set_index('Label')['Name'].to_dict()
    
    # Iterate through rows
    for _case, _data in _main_df.iterrows():
        # Obtain labels and areas
        _labels = []
        for _id in range(1,len(_name_dict.keys())+1):
            # APPLY BLACKLIST
            if _id in _blacklist:
                continue
            _area = _data[_id]
            # Check if label exists _area not nan 
            if pd.isna(_area):
                continue
            
            # label name
            _original_label_name = _id

            # string label name
            _string_name = _name_dict[_id]

            # Derived names
            _prefix_gathered_name, _remaped_name, _reduced_name = remap_dict[_id]

            # Add label to list
            _labels.append({
                "original_label": _original_label_name,
                "label_name": _string_name,
                "cluster_remaped": _prefix_gathered_name,
                "remaped": _remaped_name,
                "reduced_cluster_remaped": _reduced_name,
                "area": _area
            })
        # Create storage
        if label_type == "cluster_remaped":
            _label_output = np.zeros(35)
            _area_output = np.zeros(35)
        
        if label_type == "remaped":
            _label_output = np.zeros(73)
            _area_output = np.zeros(73)
        
        if label_type == "reduced_cluster_remaped":
            _label_output = np.zeros(14)
            _area_output = np.zeros(14)
        
        _tmp_dict = {}
        for _label in _labels:
            _key = int(_label[label_type])
            if _key in _tmp_dict:
                _tmp_dict[_key] += _label["area"]
            else:
                _tmp_dict[_key] = _label["area"]

        for _key in _tmp_dict:
            _label_output[_key-1] = 1
            _area_output[_key-1] = _tmp_dict[_key]
        
        # Generate df
        _df = pd.DataFrame()
        _df["Area"] = _area_output
        _df["True"] = _label_output
        _df = _df.T
        _df.columns = _names_list
        _export_xslx_path = os.path.join(export_dir, _case, "results.xlsx")
        _df.to_excel(_export_xslx_path) 
    
        

if __name__ == '__main__':
    main(export_dir = "/mnt/HDD/SAROS/SAROS_working_data",
         input_xlsx = "/home/franko/Desktop/SAROS_Export/01_TotalSegmentor/Output-Labels.xlsx",
         input_names_xlsx= "/home/franko/Desktop/SAROS_Export/03_DataGenerationScript_Patches/cheatsheet_names.xlsx",
         input_cheatsheet_path= "/home/franko/Desktop/SAROS_Export/03_DataGenerationScript_Patches/cheetsheet.xlsx",
         label_type="reduced_cluster_remaped")
